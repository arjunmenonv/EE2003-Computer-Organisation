
out.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <_start>:
_start:
    .cfi_startproc
    .cfi_undefined ra
    .option push
    .option norelax
    la gp, __global_pointer$
   0:	00002197          	auipc	x3,0x2
   4:	ba018193          	addi	x3,x3,-1120 # 1ba0 <__global_pointer$>
    .option pop
    la sp, __stack_top
   8:	00001117          	auipc	x2,0x1
   c:	ff810113          	addi	x2,x2,-8 # 1000 <__stack_top>
    add s0, sp, zero
  10:	00010433          	add	x8,x2,x0
    jal zero, main
  14:	3080006f          	jal	x0,31c <main>

Disassembly of section .text:

00000018 <_outbyte>:
// change later if needed
#define OUTPERIPH_BASE 0x34560
#define OUTPERIPH_WRITE_OFFSET 0x00
#define OUTPERIPH_READSTATUS_OFFSET 0x04
void _outbyte(int c)
{
  18:	fd010113          	addi	x2,x2,-48
  1c:	02812623          	sw	x8,44(x2)
  20:	03010413          	addi	x8,x2,48
  24:	fca42e23          	sw	x10,-36(x8)
        // Fill in the code here
        // What you need is to write to the address of the peripheral (as defined in th BIU)
        // Example code here:
        int *p;  // Pointer to integer
        p = (OUTPERIPH_BASE + OUTPERIPH_WRITE_OFFSET); // Set pointer value directly
  28:	000347b7          	lui	x15,0x34
  2c:	56078793          	addi	x15,x15,1376 # 34560 <__global_pointer$+0x329c0>
  30:	fef42623          	sw	x15,-20(x8)
        (*p) = c; // Write the value to the address
  34:	fec42783          	lw	x15,-20(x8)
  38:	fdc42703          	lw	x14,-36(x8)
  3c:	00e7a023          	sw	x14,0(x15)
}
  40:	00000013          	addi	x0,x0,0
  44:	02c12403          	lw	x8,44(x2)
  48:	03010113          	addi	x2,x2,48
  4c:	00008067          	jalr	x0,0(x1)

00000050 <outbyte>:

void outbyte(int c)
{
  50:	fe010113          	addi	x2,x2,-32
  54:	00112e23          	sw	x1,28(x2)
  58:	00812c23          	sw	x8,24(x2)
  5c:	02010413          	addi	x8,x2,32
  60:	fea42623          	sw	x10,-20(x8)
        static char prev = 0;
        if (c < ' ' && c != '\r' && c != '\n' && c != '\t' && c != '\b')
  64:	fec42703          	lw	x14,-20(x8)
  68:	01f00793          	addi	x15,x0,31
  6c:	02e7ca63          	blt	x15,x14,a0 <outbyte+0x50>
  70:	fec42703          	lw	x14,-20(x8)
  74:	00d00793          	addi	x15,x0,13
  78:	02f70463          	beq	x14,x15,a0 <outbyte+0x50>
  7c:	fec42703          	lw	x14,-20(x8)
  80:	00a00793          	addi	x15,x0,10
  84:	00f70e63          	beq	x14,x15,a0 <outbyte+0x50>
  88:	fec42703          	lw	x14,-20(x8)
  8c:	00900793          	addi	x15,x0,9
  90:	00f70863          	beq	x14,x15,a0 <outbyte+0x50>
  94:	fec42703          	lw	x14,-20(x8)
  98:	00800793          	addi	x15,x0,8
  9c:	02f71e63          	bne	x14,x15,d8 <outbyte+0x88>
                return;
        if (c == '\n' && prev != '\r') _outbyte('\r');
  a0:	fec42703          	lw	x14,-20(x8)
  a4:	00a00793          	addi	x15,x0,10
  a8:	00f71c63          	bne	x14,x15,c0 <outbyte+0x70>
  ac:	3b404703          	lbu	x14,948(x0) # 3b4 <prev.965>
  b0:	00d00793          	addi	x15,x0,13
  b4:	00f70663          	beq	x14,x15,c0 <outbyte+0x70>
  b8:	00d00513          	addi	x10,x0,13
  bc:	f5dff0ef          	jal	x1,18 <_outbyte>
        _outbyte(c);
  c0:	fec42503          	lw	x10,-20(x8)
  c4:	f55ff0ef          	jal	x1,18 <_outbyte>
        prev = c;
  c8:	fec42783          	lw	x15,-20(x8)
  cc:	0ff7f713          	andi	x14,x15,255
  d0:	3ae00a23          	sb	x14,948(x0) # 3b4 <prev.965>
  d4:	0080006f          	jal	x0,dc <outbyte+0x8c>
                return;
  d8:	00000013          	addi	x0,x0,0
}
  dc:	01c12083          	lw	x1,28(x2)
  e0:	01812403          	lw	x8,24(x2)
  e4:	02010113          	addi	x2,x2,32
  e8:	00008067          	jalr	x0,0(x1)

000000ec <readstatus>:
// The following function should read back the number of bytes that
// have gone through the peripheral since system startup.  Again, the
// address of the status readout register is your choice, and can be
// hardcoded here or declared as a #define
int readstatus()
{
  ec:	fe010113          	addi	x2,x2,-32
  f0:	00812e23          	sw	x8,28(x2)
  f4:	02010413          	addi	x8,x2,32
        // Fill in code here
        int *p_read;
        int num_print;
        p_read = (OUTPERIPH_BASE + OUTPERIPH_READSTATUS_OFFSET);
  f8:	000347b7          	lui	x15,0x34
  fc:	56478793          	addi	x15,x15,1380 # 34564 <__global_pointer$+0x329c4>
 100:	fef42623          	sw	x15,-20(x8)
        // Note how the _outbyte function was written, and adapt it to read back the status register
        num_print = (*p_read);
 104:	fec42783          	lw	x15,-20(x8)
 108:	0007a783          	lw	x15,0(x15)
 10c:	fef42423          	sw	x15,-24(x8)
        return num_print;
 110:	fe842783          	lw	x15,-24(x8)
}
 114:	00078513          	addi	x10,x15,0
 118:	01c12403          	lw	x8,28(x2)
 11c:	02010113          	addi	x2,x2,32
 120:	00008067          	jalr	x0,0(x1)

00000124 <mydiv>:
// These funcs have not been checked - they may fail for large
// or negative values.
// We could also have had a single function computing both, but would
// need pointers or assembly to return two values.
static int mydiv(int u, int b)
{
 124:	fe010113          	addi	x2,x2,-32
 128:	00812e23          	sw	x8,28(x2)
 12c:	00912c23          	sw	x9,24(x2)
 130:	01212a23          	sw	x18,20(x2)
 134:	02010413          	addi	x8,x2,32
 138:	fea42623          	sw	x10,-20(x8)
 13c:	feb42423          	sw	x11,-24(x8)
	register unsigned int q = 0;
 140:	00000913          	addi	x18,x0,0
	register unsigned int m = u;
 144:	fec42483          	lw	x9,-20(x8)
	while (m >= b) {
 148:	0100006f          	jal	x0,158 <mydiv+0x34>
		m -= b;
 14c:	fe842783          	lw	x15,-24(x8)
 150:	40f484b3          	sub	x9,x9,x15
		q++;
 154:	00190913          	addi	x18,x18,1
	while (m >= b) {
 158:	fe842783          	lw	x15,-24(x8)
 15c:	fef4f8e3          	bgeu	x9,x15,14c <mydiv+0x28>
	}
	return q;
 160:	00090793          	addi	x15,x18,0
}
 164:	00078513          	addi	x10,x15,0
 168:	01c12403          	lw	x8,28(x2)
 16c:	01812483          	lw	x9,24(x2)
 170:	01412903          	lw	x18,20(x2)
 174:	02010113          	addi	x2,x2,32
 178:	00008067          	jalr	x0,0(x1)

0000017c <mymod>:

static int mymod(int u, int b)
{
 17c:	fe010113          	addi	x2,x2,-32
 180:	00812e23          	sw	x8,28(x2)
 184:	00912c23          	sw	x9,24(x2)
 188:	02010413          	addi	x8,x2,32
 18c:	fea42623          	sw	x10,-20(x8)
 190:	feb42423          	sw	x11,-24(x8)
	register unsigned int m = u;
 194:	fec42483          	lw	x9,-20(x8)
	while (m >= b) m -= b;
 198:	00c0006f          	jal	x0,1a4 <mymod+0x28>
 19c:	fe842783          	lw	x15,-24(x8)
 1a0:	40f484b3          	sub	x9,x9,x15
 1a4:	fe842783          	lw	x15,-24(x8)
 1a8:	fef4fae3          	bgeu	x9,x15,19c <mymod+0x20>
	return m;
 1ac:	00048793          	addi	x15,x9,0
}
 1b0:	00078513          	addi	x10,x15,0
 1b4:	01c12403          	lw	x8,28(x2)
 1b8:	01812483          	lw	x9,24(x2)
 1bc:	02010113          	addi	x2,x2,32
 1c0:	00008067          	jalr	x0,0(x1)

000001c4 <convert>:

char *convert(unsigned int num, int base)
{
 1c4:	fd010113          	addi	x2,x2,-48
 1c8:	02112623          	sw	x1,44(x2)
 1cc:	02812423          	sw	x8,40(x2)
 1d0:	03010413          	addi	x8,x2,48
 1d4:	fca42e23          	sw	x10,-36(x8)
 1d8:	fcb42c23          	sw	x11,-40(x8)
	static char Representation[]= "0123456789ABCDEF";
	static char buffer[50];
	char *ptr;

	ptr = &buffer[49];
 1dc:	3e900793          	addi	x15,x0,1001
 1e0:	fef42623          	sw	x15,-20(x8)
	*ptr = '\0';
 1e4:	fec42783          	lw	x15,-20(x8)
 1e8:	00078023          	sb	x0,0(x15)

	do
	{
                int x = mymod(num, base);
 1ec:	fdc42783          	lw	x15,-36(x8)
 1f0:	fd842583          	lw	x11,-40(x8)
 1f4:	00078513          	addi	x10,x15,0
 1f8:	f85ff0ef          	jal	x1,17c <mymod>
 1fc:	fea42423          	sw	x10,-24(x8)
		*--ptr = Representation[x];
 200:	fec42783          	lw	x15,-20(x8)
 204:	fff78793          	addi	x15,x15,-1
 208:	fef42623          	sw	x15,-20(x8)
 20c:	3a000713          	addi	x14,x0,928
 210:	fe842783          	lw	x15,-24(x8)
 214:	00f707b3          	add	x15,x14,x15
 218:	0007c703          	lbu	x14,0(x15)
 21c:	fec42783          	lw	x15,-20(x8)
 220:	00e78023          	sb	x14,0(x15)
		num = mydiv(num, base);
 224:	fdc42783          	lw	x15,-36(x8)
 228:	fd842583          	lw	x11,-40(x8)
 22c:	00078513          	addi	x10,x15,0
 230:	ef5ff0ef          	jal	x1,124 <mydiv>
 234:	00050793          	addi	x15,x10,0
 238:	fcf42e23          	sw	x15,-36(x8)
	}while(num != 0);
 23c:	fdc42783          	lw	x15,-36(x8)
 240:	fa0796e3          	bne	x15,x0,1ec <convert+0x28>

	return(ptr);
 244:	fec42783          	lw	x15,-20(x8)
}
 248:	00078513          	addi	x10,x15,0
 24c:	02c12083          	lw	x1,44(x2)
 250:	02812403          	lw	x8,40(x2)
 254:	03010113          	addi	x2,x2,48
 258:	00008067          	jalr	x0,0(x1)

0000025c <myputs>:

// void myputs(const char *a, int len)
void myputs(const char *a)
{
 25c:	fe010113          	addi	x2,x2,-32
 260:	00112e23          	sw	x1,28(x2)
 264:	00812c23          	sw	x8,24(x2)
 268:	00912a23          	sw	x9,20(x2)
 26c:	02010413          	addi	x8,x2,32
 270:	fea42623          	sw	x10,-20(x8)
        register char* p;
	for(p=(char *)a; (*p)!=0; p++) {
 274:	fec42483          	lw	x9,-20(x8)
 278:	0140006f          	jal	x0,28c <myputs+0x30>
		outbyte(*p);
 27c:	0004c783          	lbu	x15,0(x9)
 280:	00078513          	addi	x10,x15,0
 284:	dcdff0ef          	jal	x1,50 <outbyte>
	for(p=(char *)a; (*p)!=0; p++) {
 288:	00148493          	addi	x9,x9,1
 28c:	0004c783          	lbu	x15,0(x9)
 290:	fe0796e3          	bne	x15,x0,27c <myputs+0x20>
	}
}
 294:	00000013          	addi	x0,x0,0
 298:	01c12083          	lw	x1,28(x2)
 29c:	01812403          	lw	x8,24(x2)
 2a0:	01412483          	lw	x9,20(x2)
 2a4:	02010113          	addi	x2,x2,32
 2a8:	00008067          	jalr	x0,0(x1)

000002ac <fib>:
#include "outbyte.c"

int fib(int n)
{
 2ac:	fe010113          	addi	x2,x2,-32
 2b0:	00112e23          	sw	x1,28(x2)
 2b4:	00812c23          	sw	x8,24(x2)
 2b8:	00912a23          	sw	x9,20(x2)
 2bc:	02010413          	addi	x8,x2,32
 2c0:	fea42623          	sw	x10,-20(x8)
	if (n<=2) return 1;
 2c4:	fec42703          	lw	x14,-20(x8)
 2c8:	00200793          	addi	x15,x0,2
 2cc:	00e7c663          	blt	x15,x14,2d8 <fib+0x2c>
 2d0:	00100793          	addi	x15,x0,1
 2d4:	0300006f          	jal	x0,304 <fib+0x58>
	else return fib(n-1) + fib(n-2);
 2d8:	fec42783          	lw	x15,-20(x8)
 2dc:	fff78793          	addi	x15,x15,-1
 2e0:	00078513          	addi	x10,x15,0
 2e4:	fc9ff0ef          	jal	x1,2ac <fib>
 2e8:	00050493          	addi	x9,x10,0
 2ec:	fec42783          	lw	x15,-20(x8)
 2f0:	ffe78793          	addi	x15,x15,-2
 2f4:	00078513          	addi	x10,x15,0
 2f8:	fb5ff0ef          	jal	x1,2ac <fib>
 2fc:	00050793          	addi	x15,x10,0
 300:	00f487b3          	add	x15,x9,x15
}
 304:	00078513          	addi	x10,x15,0
 308:	01c12083          	lw	x1,28(x2)
 30c:	01812403          	lw	x8,24(x2)
 310:	01412483          	lw	x9,20(x2)
 314:	02010113          	addi	x2,x2,32
 318:	00008067          	jalr	x0,0(x1)

0000031c <main>:

int main()
{
 31c:	ff010113          	addi	x2,x2,-16
 320:	00112623          	sw	x1,12(x2)
 324:	00812423          	sw	x8,8(x2)
 328:	01010413          	addi	x8,x2,16
	if (fib(6)==8) 
 32c:	00600513          	addi	x10,x0,6
 330:	f7dff0ef          	jal	x1,2ac <fib>
 334:	00050713          	addi	x14,x10,0
 338:	00800793          	addi	x15,x0,8
 33c:	00f71863          	bne	x14,x15,34c <main+0x30>
		myputs("HelloWorld\n");
 340:	35800513          	addi	x10,x0,856
 344:	f19ff0ef          	jal	x1,25c <myputs>
 348:	00c0006f          	jal	x0,354 <main+0x38>
	else
		myputs("GoodbyeWorld\n");
 34c:	36400513          	addi	x10,x0,868
 350:	f0dff0ef          	jal	x1,25c <myputs>

	// Infinite loop to avoid repeating the program
	for(;;);
 354:	0000006f          	jal	x0,354 <main+0x38>
